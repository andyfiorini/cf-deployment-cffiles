---
jobs:
- name: deploy-cf-development
  serial_groups: [development]
  serial: true
  plan:
  - aggregate:
    - get: master-bosh-root-cert
    - get: pipeline-tasks
    - get: cf-manifests-development
      trigger: true
    - get: common-development
      trigger: true
    - get: cf-stemcell
      trigger: true
    - get: cf-release
      trigger: true
    - get: uaa-customized-release
      trigger: true
    - get: java-buildpack-release
      trigger: true
    - get: go-buildpack-release
      trigger: true
    - get: binary-buildpack-release
      trigger: true
    - get: nodejs-buildpack-release
      trigger: true
    - get: ruby-buildpack-release
      trigger: true
    - get: php-buildpack-release
      trigger: true
    - get: python-buildpack-release
      trigger: true
    - get: staticfile-buildpack-release
      trigger: true
    - get: dotnet-core-buildpack-release
      trigger: true
    - get: cg-s3-secureproxy-release
      trigger: true
  - task: cf-development-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: cf-manifests-development
      - name: common-development
      run:
        path: cf-manifests-development/generate-development.sh
        args:
        - "common-development/decrypted-cf-development.main.yml"
        - "common-development/decrypted-cf-development.external.yml"
        - "generated-manifest/cf-development.yml"
      outputs:
      - name: generated-manifest
  - put: cf-deployment-development
    params: &deploy-params
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: generated-manifest/cf-development.yml
      releases:
      - binary-buildpack-release/*.tgz
      - cf-release/*.tgz
      - cg-s3-secureproxy-release/*.tgz
      - dotnet-core-buildpack-release/*.tgz
      - go-buildpack-release/*.tgz
      - java-buildpack-release/*.tgz
      - nodejs-buildpack-release/*.tgz
      - php-buildpack-release/*.tgz
      - python-buildpack-release/*.tgz
      - ruby-buildpack-release/*.tgz
      - staticfile-buildpack-release/*.tgz
      - uaa-customized-release/*.tgz
      stemcells:
      - cf-stemcell/*.tgz
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed CF on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy CF on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-diego-development
  serial_groups: [development]
  serial: true
  plan:
  - aggregate:
    - get: cf-deployment-development
      trigger: true
    - get: master-bosh-root-cert
      passed: [deploy-cf-development]
    - get: pipeline-tasks
    - get: diego-manifests
      resource: diego-manifests-development
      trigger: true
    - get: diego-release-repo
      params: {submodules: none}
    - get: common-development
      trigger: true
      passed: [deploy-cf-development]
    - get: cf-stemcell
      trigger: true
      passed: [deploy-cf-development]
    - get: diego-release
      trigger: true
    - get: cflinuxfs2-release
      trigger: true
    - get: garden-runc-release
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-development
  - task: generate-diego-development-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: master-bosh-root-cert
      - name: common-development
      - name: diego-manifests
      - name: diego-release-repo
      - name: terraform-yaml
      run:
        path: diego-manifests/diego/generate.sh
        args:
        - common-development/decrypted-diego-development.yml
        - {{cf-development-bosh-deployment}}
        - instance-count-overrides-staging.yml
        - isolation-cells-development.yml
        - terraform-yaml/state.yml
        - generated-manifest/diego-development.yml
      outputs:
      - name: generated-manifest
      params:
        BOSH_ENVIRONMENT: {{development-bosh-target}}
        BOSH_CA_CERT: master-bosh-root-cert/master-bosh.crt
        BOSH_CLIENT: {{development-bosh-client}}
        BOSH_CLIENT_SECRET: {{development-bosh-client-secret}}
  - put: diego-development-deployment
    params:
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: generated-manifest/diego-development.yml
      stemcells:
      - cf-stemcell/*.tgz
      releases:
      - diego-release/*.tgz
      - garden-runc-release/*.tgz
      - cflinuxfs2-release/*.tgz
  - task: update-isolation-segments
    file: diego-manifests/diego/update-isolation-segments.yml
    params:
      CF_API_URL: {{cf-api-url-development}}
      CF_USERNAME: {{cf-username-development}}
      CF_PASSWORD: {{cf-password-development}}
      PLATFORM_ISOLATION_SEGMENT: {{platform-isolation-segment-development}}
      PLATFORM_ORGANIZATION: {{platform-organization-development}}
      PLATFORM_SPACE: {{platform-space-development}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Diego on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Diego on development
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: terraform-plan-development
  plan:
  - aggregate:
    - get: terraform-templates
      resource: terraform-config-development
      trigger: true
    - get: pipeline-tasks
  - task: terraform-plan
    tags:
    - iaas
    file: terraform-templates/terraform/terraform-apply.yml
    params: &tf-development
      TERRAFORM_ACTION: plan
      TEMPLATE_SUBDIR: terraform
      STACK_NAME: cf-development
      S3_TFSTATE_BUCKET: {{tf-state-bucket}}
      AWS_DEFAULT_REGION: {{aws-region}}
      CF_API: {{cf-api-url-development}}
      CF_CLIENT_ID: {{cf-client-id-development}}
      CF_CLIENT_SECRET: {{cf-client-secret-development}}
      TF_VAR_remote_state_bucket: {{tf-state-bucket}}
      TF_VAR_iaas_stack_name: development
  - put: slack
    params:
      text_file: terraform-state/message.txt
      text:  |
        :terraform: $BUILD_JOB_NAME needs review
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: terraform-apply-development
  plan:
  - aggregate:
    - get: terraform-templates
      resource: terraform-config-development
      passed: [terraform-plan-development]
    - get: pipeline-tasks
  - task: terraform-apply
    file: terraform-templates/terraform/terraform-apply.yml
    tags:
    - iaas
    params:
      <<: *tf-development
      TERRAFORM_ACTION: apply

- name: smoke-tests-development
  serial_groups: [development]
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: common
      resource: master-bosh-root-cert
      passed: [deploy-cf-development]
    - get: cf-deployment-development
      passed: [deploy-diego-development]
      trigger: true
    - get: diego-development-deployment
      trigger: true
  - task: run-errand
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{development-bosh-target}}
      BOSH_USERNAME: {{development-bosh-username}}
      BOSH_PASSWORD: {{development-bosh-password}}
      BOSH_DEPLOYMENT_NAME: {{cf-development-bosh-deployment}}
      BOSH_ERRAND: smoke_tests
      BOSH_CACERT: common/master-bosh.crt
      BOSH_FLAGS: "--keep-alive"
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Smoke Tests for CF on development PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: Smoke Tests for CF on development FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: uaa-smoke-tests-development
  plan:
  - aggregate:
    - get: cf-deployment-development
      trigger: true
      passed: [deploy-cf-development]
    - get: pipeline-tasks
    - get: uaa-customized-release
      trigger: true
      passed: [deploy-cf-development]
  - task: smoke-tests
    file: pipeline-tasks/uaa-smoke-tests.yml
    params:
      BASE_URL: {{uaa-url-development}}
  on_failure:
    put: slack
    params:
      text: |
        :x: UAA Smoke Tests for CF on development FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-cf-staging
  serial_groups: [staging]
  serial: true
  plan:
  - aggregate:
    - get: master-bosh-root-cert
    - get: pipeline-tasks
    - get: cf-manifests-staging
      trigger: true
    - get: common-staging
      trigger: true
    - get: cf-stemcell
      trigger: true
    - get: cf-release
      trigger: true
    - get: uaa-customized-release
      trigger: true
    - get: java-buildpack-release
      trigger: true
    - get: go-buildpack-release
      trigger: true
    - get: binary-buildpack-release
      trigger: true
    - get: nodejs-buildpack-release
      trigger: true
    - get: ruby-buildpack-release
      trigger: true
    - get: php-buildpack-release
      trigger: true
    - get: python-buildpack-release
      trigger: true
    - get: staticfile-buildpack-release
      trigger: true
    - get: dotnet-core-buildpack-release
      trigger: true
    - get: cg-s3-secureproxy-release
      trigger: true
  - task: cf-stage-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: cf-manifests-staging
      - name: common-staging
      run:
        path: cf-manifests-staging/generate-staging.sh
        args:
        - "common-staging/decrypted-cf-staging.main.yml"
        - "common-staging/decrypted-cf-staging.external.yml"
        - "cf-manifest/manifest.yml"
      outputs:
      - name: cf-manifest
  - put: cf-deployment-staging
    params: &deploy-params
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: cf-manifest/manifest.yml
      releases:
      - cf-release/*.tgz
      - uaa-customized-release/*.tgz
      - java-buildpack-release/*.tgz
      - go-buildpack-release/*.tgz
      - binary-buildpack-release/*.tgz
      - nodejs-buildpack-release/*.tgz
      - ruby-buildpack-release/*.tgz
      - php-buildpack-release/*.tgz
      - python-buildpack-release/*.tgz
      - staticfile-buildpack-release/*.tgz
      - dotnet-core-buildpack-release/*.tgz
      - cg-s3-secureproxy-release/*.tgz
      stemcells:
      - cf-stemcell/*.tgz
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed CF on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy CF on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-diego-staging
  serial_groups: [staging]
  serial: true
  plan:
  - aggregate:
    - get: cf-deployment-staging
      trigger: true
    - get: master-bosh-root-cert
      passed: [deploy-cf-staging]
    - get: pipeline-tasks
    - get: diego-manifests
      resource: diego-manifests-staging
      trigger: true
    - get: diego-release-repo
      params: {submodules: none}
    - get: common-staging
      trigger: true
      passed: [deploy-cf-staging]
    - get: cf-stemcell
      trigger: true
      passed: [deploy-cf-staging]
    - get: diego-release
      trigger: true
    - get: cflinuxfs2-release
      trigger: true
    - get: garden-runc-release
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-staging
  - task: generate-diego-staging-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: master-bosh-root-cert
      - name: common-staging
      - name: diego-manifests
      - name: diego-release-repo
      - name: terraform-yaml
      run:
        path: diego-manifests/diego/generate.sh
        args:
        - common-staging/decrypted-diego-staging.yml
        - {{cf-staging-bosh-deployment}}
        - instance-count-overrides-staging.yml
        - isolation-cells-staging.yml
        - terraform-yaml/state.yml
        - generated-manifest/diego-staging.yml
      outputs:
      - name: generated-manifest
      params:
        BOSH_ENVIRONMENT: {{staging-bosh-target}}
        BOSH_CA_CERT: master-bosh-root-cert/master-bosh.crt
        BOSH_CLIENT: {{staging-bosh-client}}
        BOSH_CLIENT_SECRET: {{staging-bosh-client-secret}}
  - put: diego-staging-deployment
    params:
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: generated-manifest/diego-staging.yml
      stemcells:
      - cf-stemcell/*.tgz
      releases:
      - diego-release/*.tgz
      - garden-runc-release/*.tgz
      - cflinuxfs2-release/*.tgz
  - task: update-isolation-segments
    file: diego-manifests/diego/update-isolation-segments.yml
    params:
      CF_API_URL: {{cf-api-url-staging}}
      CF_USERNAME: {{cf-username-staging}}
      CF_PASSWORD: {{cf-password-staging}}
      PLATFORM_ISOLATION_SEGMENT: {{platform-isolation-segment-staging}}
      PLATFORM_ORGANIZATION: {{platform-organization-staging}}
      PLATFORM_SPACE: {{platform-space-staging}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Diego on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Diego on staging
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: uaa-smoke-tests-staging
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: uaa-customized-release
      passed: [deploy-cf-staging]
    - get: cf-deployment-staging
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/uaa-smoke-tests.yml
    params:
      BASE_URL: {{uaa-url-staging}}
  on_failure:
    put: slack
    params:
      text: |
        :x: UAA Smoke Tests for CF on staging FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: terraform-plan-staging
  plan:
  - aggregate:
    - get: terraform-templates
      resource: terraform-config-staging-production
      trigger: true
    - get: pipeline-tasks
  - task: terraform-plan
    tags:
    - iaas
    file: terraform-templates/terraform/terraform-apply.yml
    params: &tf-staging
      TERRAFORM_ACTION: plan
      TEMPLATE_SUBDIR: terraform
      STACK_NAME: cf-staging
      S3_TFSTATE_BUCKET: {{tf-state-bucket}}
      AWS_DEFAULT_REGION: {{aws-region}}
      CF_API: {{cf-api-url-staging}}
      CF_CLIENT_ID: {{cf-client-id-staging}}
      CF_CLIENT_SECRET: {{cf-client-secret-staging}}
      TF_VAR_remote_state_bucket: {{tf-state-bucket}}
      TF_VAR_iaas_stack_name: staging
  - put: slack
    params:
      text_file: terraform-state/message.txt
      text:  |
        :terraform: $BUILD_JOB_NAME needs review
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: terraform-apply-staging
  plan:
  - aggregate:
    - get: terraform-templates
      resource: terraform-config-staging-production
      passed: [terraform-plan-staging]
    - get: pipeline-tasks
  - task: terraform-apply
    file: terraform-templates/terraform/terraform-apply.yml
    params:
      <<: *tf-staging
      TERRAFORM_ACTION: apply
    tags:
    - iaas

- name: smoke-tests-staging
  serial_groups: [staging]
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: common
      resource: master-bosh-root-cert
      passed: [deploy-cf-staging]
    - get: cf-deployment-staging
      passed: [deploy-diego-staging]
      trigger: true
    - get: diego-staging-deployment
      trigger: true
    # Get resources from upstream jobs for use in production deploy
    - get: cf-stemcell
      passed: [deploy-cf-staging]
    - get: cf-release
      passed: [deploy-cf-staging]
    - get: uaa-customized-release
      passed: [deploy-cf-staging]
    - get: java-buildpack-release
      passed: [deploy-cf-staging]
    - get: go-buildpack-release
      passed: [deploy-cf-staging]
    - get: binary-buildpack-release
      passed: [deploy-cf-staging]
    - get: nodejs-buildpack-release
      passed: [deploy-cf-staging]
    - get: ruby-buildpack-release
      passed: [deploy-cf-staging]
    - get: php-buildpack-release
      passed: [deploy-cf-staging]
    - get: python-buildpack-release
      passed: [deploy-cf-staging]
    - get: staticfile-buildpack-release
      passed: [deploy-cf-staging]
    - get: cg-s3-secureproxy-release
      passed: [deploy-cf-staging]
    - get: tests-timer
      trigger: true
    - get: terraform-config-staging-production
      passed: [terraform-apply-staging]
  - task: run-errand
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{staging-bosh-target}}
      BOSH_USERNAME: {{staging-bosh-username}}
      BOSH_PASSWORD: {{staging-bosh-password}}
      BOSH_DEPLOYMENT_NAME: {{cf-staging-bosh-deployment}}
      BOSH_ERRAND: smoke_tests
      BOSH_CACERT: common/master-bosh.crt
      BOSH_FLAGS: "--keep-alive"
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Smoke Tests for CF on staging PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-news-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: Smoke Tests for CF on staging FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: acceptance-tests-staging
  serial_groups: [staging]
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: common
      resource: master-bosh-root-cert
      passed: [smoke-tests-staging]
    - get: cf-deployment-staging
      passed: [smoke-tests-staging]
      trigger: true
    # Get resources from upstream jobs for use in production deploy
    - get: cf-stemcell
      passed: [smoke-tests-staging]
    - get: cf-release
      passed: [smoke-tests-staging]
    - get: uaa-customized-release
      passed: [smoke-tests-staging, uaa-smoke-tests-staging]
    - get: java-buildpack-release
      passed: [deploy-cf-staging]
      passed: [deploy-cf-staging]
    - get: go-buildpack-release
      passed: [deploy-cf-staging]
    - get: binary-buildpack-release
      passed: [deploy-cf-staging]
    - get: nodejs-buildpack-release
      passed: [deploy-cf-staging]
    - get: ruby-buildpack-release
      passed: [deploy-cf-staging]
    - get: php-buildpack-release
      passed: [deploy-cf-staging]
    - get: python-buildpack-release
      passed: [deploy-cf-staging]
    - get: staticfile-buildpack-release
      passed: [deploy-cf-staging]
    - get: dotnet-core-buildpack-release
      passed: [deploy-cf-staging]
    - get: cg-s3-secureproxy-release
      passed: [smoke-tests-staging]
    - get: terraform-config-staging-production
      passed: [smoke-tests-staging]
  - task: run-errand
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{staging-bosh-target}}
      BOSH_USERNAME: {{staging-bosh-username}}
      BOSH_PASSWORD: {{staging-bosh-password}}
      BOSH_DEPLOYMENT_NAME: {{cf-staging-bosh-deployment}}
      BOSH_ERRAND: acceptance_tests
      BOSH_CACERT: common/master-bosh.crt
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Acceptance Tests for CF on staging PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: Acceptance Tests for CF on staging FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-cf-production
  serial_groups: [production]
  serial: true
  plan:
  - aggregate:
    - get: master-bosh-root-cert
    - get: pipeline-tasks
    - get: cf-manifests-production
    - get: common
      resource: common-production
    - get: cf-stemcell
      passed: [acceptance-tests-staging]
      trigger: true
    - get: cf-release
      passed: [acceptance-tests-staging]
    - get: uaa-customized-release
      passed: [acceptance-tests-staging]
    - get: java-buildpack-release
      passed: [acceptance-tests-staging]
    - get: go-buildpack-release
      passed: [acceptance-tests-staging]
    - get: binary-buildpack-release
      passed: [acceptance-tests-staging]
    - get: nodejs-buildpack-release
      passed: [acceptance-tests-staging]
    - get: ruby-buildpack-release
      passed: [acceptance-tests-staging]
    - get: php-buildpack-release
      passed: [acceptance-tests-staging]
    - get: python-buildpack-release
      passed: [acceptance-tests-staging]
    - get: staticfile-buildpack-release
      passed: [acceptance-tests-staging]
    - get: dotnet-core-buildpack-release
      passed: [acceptance-tests-staging]
    - get: cg-s3-secureproxy-release
      passed: [acceptance-tests-staging]
  - task: cf-prod-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: cf-manifests-production
      - name: common
      run:
        path: cf-manifests-production/generate.sh
        args:
        - "common/decrypted-cf.main.yml"
        - "common/decrypted-cf.external.yml"
        - "cf-manifest/manifest.yml"
      outputs:
      - name: cf-manifest
  - put: cf-deployment-production
    params: *deploy-params
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed CF on prod
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy CF on prod
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: deploy-diego-production
  serial_groups: [production]
  serial: true
  plan:
  - aggregate:
    - get: cf-deployment-production
      trigger: true
    - get: master-bosh-root-cert
      passed: [deploy-cf-production]
    - get: pipeline-tasks
    - get: diego-manifests
      resource: diego-manifests-production
      trigger: true
    - get: diego-release-repo
      params: {submodules: none}
    - get: common-production
      trigger: true
      passed: [deploy-cf-production]
    - get: cf-stemcell
      trigger: true
      passed: [deploy-cf-production]
    - get: diego-release
      trigger: true
    - get: cflinuxfs2-release
      trigger: true
    - get: garden-runc-release
      trigger: true
    - get: terraform-yaml
      resource: terraform-yaml-production
  - task: generate-diego-production-manifest
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: 18fgsa/concourse-task
      inputs:
      - name: master-bosh-root-cert
      - name: common-production
      - name: diego-manifests
      - name: diego-release-repo
      - name: terraform-yaml
      run:
        path: diego-manifests/diego/generate.sh
        args:
        - common-production/decrypted-diego.yml
        - {{cf-production-bosh-deployment}}
        - instance-count-overrides-production.yml
        - isolation-cells-production.yml
        - terraform-yaml/state.yml
        - generated-manifest/diego-production.yml
      outputs:
      - name: generated-manifest
      params:
        BOSH_ENVIRONMENT: {{production-bosh-target}}
        BOSH_CA_CERT: master-bosh-root-cert/master-bosh.crt
        BOSH_CLIENT: {{production-bosh-client}}
        BOSH_CLIENT_SECRET: {{production-bosh-client-secret}}
  - put: diego-production-deployment
    params:
      cert: master-bosh-root-cert/master-bosh.crt
      manifest: generated-manifest/diego-production.yml
      stemcells:
      - cf-stemcell/*.tgz
      releases:
      - diego-release/*.tgz
      - garden-runc-release/*.tgz
      - cflinuxfs2-release/*.tgz
  - task: update-isolation-segments
    file: diego-manifests/diego/update-isolation-segments.yml
    params:
      CF_API_URL: {{cf-api-url-production}}
      CF_USERNAME: {{cf-username-production}}
      CF_PASSWORD: {{cf-password-production}}
      PLATFORM_ISOLATION_SEGMENT: {{platform-isolation-segment-production}}
      PLATFORM_ORGANIZATION: {{platform-organization-production}}
      PLATFORM_SPACE: {{platform-space-production}}
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Successfully deployed Diego on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: FAILED to deploy Diego on production
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: uaa-smoke-tests-production
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: uaa-customized-release
      passed: [deploy-cf-production]
    - get: cf-deployment-production
      trigger: true
  - task: smoke-tests
    file: pipeline-tasks/uaa-smoke-tests.yml
    params:
      BASE_URL: {{uaa-url-production}}
  on_failure:
    put: slack
    params:
      text: |
        :x: UAA Smoke Tests for CF on production FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: terraform-plan-production
  plan:
  - aggregate:
    - get: terraform-templates
      resource: terraform-config-staging-production
      trigger: true
      passed: [acceptance-tests-staging]
    - get: pipeline-tasks
  - task: terraform-plan
    tags:
    - iaas
    file: terraform-templates/terraform/terraform-apply.yml
    params: &tf-production
      TERRAFORM_ACTION: plan
      TEMPLATE_SUBDIR: terraform
      STACK_NAME: cf-production
      S3_TFSTATE_BUCKET: {{tf-state-bucket}}
      AWS_DEFAULT_REGION: {{aws-region}}
      CF_API: {{cf-api-url-production}}
      CF_CLIENT_ID: {{cf-client-id-production}}
      CF_CLIENT_SECRET: {{cf-client-secret-production}}
      TF_VAR_remote_state_bucket: {{tf-state-bucket}}
      TF_VAR_iaas_stack_name: production
  - put: slack
    params:
      text_file: terraform-state/message.txt
      text:  |
        :terraform: $BUILD_JOB_NAME needs review
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

- name: terraform-apply-production
  plan:
  - aggregate:
    - get: terraform-templates
      resource: terraform-config-staging-production
      passed: [terraform-plan-production]
    - get: pipeline-tasks
  - task: terraform-apply
    file: terraform-templates/terraform/terraform-apply.yml
    tags:
    - iaas
    params:
      <<: *tf-production
      TERRAFORM_ACTION: apply

- name: smoke-tests-production
  serial_groups: [production]
  plan:
  - aggregate:
    - get: pipeline-tasks
    - get: common
      resource: master-bosh-root-cert
      passed: [deploy-cf-production]
    - get: cf-deployment-production
      passed: [deploy-diego-production]
      trigger: true
    - get: diego-production-deployment
      trigger: true
    - get: tests-timer
      trigger: true
  - task: run-errand
    file: pipeline-tasks/bosh-errand.yml
    params:
      BOSH_TARGET: {{production-bosh-target}}
      BOSH_USERNAME: {{production-bosh-username}}
      BOSH_PASSWORD: {{production-bosh-password}}
      BOSH_DEPLOYMENT_NAME: {{cf-production-bosh-deployment}}
      BOSH_ERRAND: smoke_tests
      BOSH_CACERT: common/master-bosh.crt
      BOSH_FLAGS: "--keep-alive"
  on_success:
    put: slack
    params:
      text: |
        :white_check_mark: Smoke Tests for CF on prod PASSED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-news-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}
  on_failure:
    put: slack
    params:
      text: |
        :x: Smoke Tests for CF on prod FAILED
        <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME|View build details>
      channel: {{slack-channel}}
      username: {{slack-username}}
      icon_url: {{slack-icon-url}}

resources:
- name: master-bosh-root-cert
  type: s3-iam
  source:
    bucket: {{cf-private-production-bucket}}
    region_name: {{aws-region}}
    versioned_file: master-bosh.crt

- name: pipeline-tasks
  type: git
  source:
    uri: {{pipeline-tasks-git-url}}
    branch: {{pipeline-tasks-git-branch}}

- name: slack
  type: slack-notification
  source:
    url: {{slack-webhook-url}}

- name: cf-manifests-development
  type: git
  source:
    uri: {{cf-manifests-git-url}}
    branch: {{cf-manifests-git-branch-development}}
    paths:
    - cf-*.yml

- name: cf-manifests-staging
  type: git
  source:
    uri: {{cf-manifests-git-url}}
    branch: {{cf-manifests-git-branch-staging}}
    paths:
    - cf-*.yml

- name: cf-manifests-production
  type: git
  source:
    uri: {{cf-manifests-git-url}}
    branch: {{cf-manifests-git-branch-production}}
    paths:
    - cf-*.yml

- name: terraform-config-development
  type: git
  source:
    uri: {{cf-manifests-git-url}}
    branch: {{cf-manifests-git-branch-development}}
    paths:
    - terraform/*

- name: terraform-config-staging-production
  type: git
  source:
    uri: {{cf-manifests-git-url}}
    branch: {{cf-manifests-git-branch-staging}}
    paths:
    - terraform/*

- name: common-development
  type: cg-common
  source:
    bucket_name: {{cf-private-development-bucket}}
    secrets_files:
    - cf-development.main.yml
    - cf-development.external.yml
    - diego-development.yml
    secrets_passphrase: {{cf-private-development-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: common-staging
  type: cg-common
  source:
    bucket_name: {{cf-private-staging-bucket}}
    secrets_files:
    - cf-staging.main.yml
    - cf-staging.external.yml
    - diego-staging.yml
    secrets_passphrase: {{cf-private-staging-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: common-production
  type: cg-common
  source:
    bucket_name: {{cf-private-production-bucket}}
    secrets_files:
    - cf.main.yml
    - cf.external.yml
    - diego.yml
    secrets_passphrase: {{cf-private-production-passphrase}}
    bosh_cert: bosh.pem
    region: {{aws-region}}

- name: cf-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-aws-xen-hvm-ubuntu-trusty-go_agent

- name: cf-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/cf-release

- name: java-buildpack-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/java-buildpack-release

- name: go-buildpack-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/go-buildpack-release

- name: binary-buildpack-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/binary-buildpack-release

- name: nodejs-buildpack-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/nodejs-buildpack-release

- name: ruby-buildpack-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/ruby-buildpack-release

- name: php-buildpack-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/php-buildpack-release

- name: python-buildpack-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/python-buildpack-release

- name: staticfile-buildpack-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/staticfile-buildpack-release

- name: dotnet-core-buildpack-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/dotnet-core-buildpack-release

- name: diego-manifests-development
  type: git
  source:
    uri: {{cf-manifests-git-url}}
    branch: {{cf-manifests-git-branch-development}}
    paths:
    - diego/*

- name: diego-manifests-staging
  type: git
  source:
    uri: {{cf-manifests-git-url}}
    branch: {{cf-manifests-git-branch-staging}}
    paths:
    - diego/*

- name: diego-manifests-production
  type: git
  source:
    uri: {{cf-manifests-git-url}}
    branch: {{cf-manifests-git-branch-production}}
    paths:
    - diego/*

- name: terraform-yaml-development
  type: s3-iam
  source:
    bucket: {{tf-state-bucket}}
    versioned_file: {{tf-state-file-development}}
    region_name: {{aws-region}}

- name: terraform-yaml-staging
  type: s3-iam
  source:
    bucket: {{tf-state-bucket}}
    versioned_file: {{tf-state-file-staging}}
    region_name: {{aws-region}}

- name: terraform-yaml-production
  type: s3-iam
  source:
    bucket: {{tf-state-bucket}}
    versioned_file: {{tf-state-file-production}}
    region_name: {{aws-region}}

- name: diego-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/diego-release

- name: diego-release-repo
  type: git
  source:
    uri: {{diego-release-repo-git-url}}
    branch: {{diego-release-repo-git-branch}}
    paths:
    - releases/diego-*.yml

- name: diego-development-deployment
  type: 18f-bosh-deployment
  source:
    target: {{development-bosh-target}}
    client_id: {{development-bosh-client}}
    client_secret: {{development-bosh-client-secret}}
    deployment: {{diego-development-bosh-deployment}}

- name: diego-staging-deployment
  type: 18f-bosh-deployment
  source:
    target: {{staging-bosh-target}}
    client_id: {{staging-bosh-client}}
    client_secret: {{staging-bosh-client-secret}}
    deployment: {{diego-staging-bosh-deployment}}

- name: diego-production-deployment
  type: 18f-bosh-deployment
  source:
    target: {{production-bosh-target}}
    client_id: {{production-bosh-client}}
    client_secret: {{production-bosh-client-secret}}
    deployment: {{diego-production-bosh-deployment}}

- name: garden-runc-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/garden-runc-release

- name: cflinuxfs2-release
  type: bosh-io-release
  source:
    repository: cloudfoundry/cflinuxfs2-release

- name: cf-deployment-development
  type: 18f-bosh-deployment
  source:
    target: {{development-bosh-target}}
    client_id: {{development-bosh-client}}
    client_secret: {{development-bosh-client-secret}}
    deployment: {{cf-development-bosh-deployment}}

- name: cf-deployment-staging
  type: 18f-bosh-deployment
  source:
    target: {{staging-bosh-target}}
    client_id: {{staging-bosh-client}}
    client_secret: {{staging-bosh-client-secret}}
    deployment: {{cf-staging-bosh-deployment}}

- name: cf-deployment-production
  type: 18f-bosh-deployment
  source:
    target: {{production-bosh-target}}
    client_id: {{production-bosh-client}}
    client_secret: {{production-bosh-client-secret}}
    deployment: {{cf-production-bosh-deployment}}

- name: uaa-customized-release
  type: s3-iam
  source:
    bucket: {{s3-bosh-releases-bucket}}
    private: true
    regexp: uaa-customized-(.*).tgz
    region_name: {{aws-region}}

- name: cg-s3-secureproxy-release
  type: s3-iam
  source:
    bucket: {{s3-bosh-releases-bucket}}
    private: true
    regexp: secureproxy-(.*).tgz
    region_name: {{aws-region}}

- name: tests-timer
  type: time
  source:
    interval: 10m

resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource

- name: 18f-bosh-deployment
  type: docker-image
  source:
    repository: 18fgsa/bosh-deployment-resource

- name: cg-common
  type: docker-image
  source:
    repository: 18fgsa/cg-common-resource

- name: s3-iam
  type: docker-image
  source:
    repository: 18fgsa/s3-resource

groups:
- name: all
  jobs:
  - deploy-cf-development
  - terraform-plan-development
  - terraform-apply-development
  - deploy-diego-development
  - uaa-smoke-tests-development
  - smoke-tests-development
  - deploy-cf-staging
  - terraform-plan-staging
  - terraform-apply-staging
  - deploy-diego-staging
  - uaa-smoke-tests-staging
  - smoke-tests-staging
  - acceptance-tests-staging
  - deploy-cf-production
  - terraform-plan-production
  - terraform-apply-production
  - deploy-diego-production
  - smoke-tests-production
  - uaa-smoke-tests-production
- name: development
  jobs:
  - deploy-cf-development
  - terraform-plan-development
  - terraform-apply-development
  - deploy-diego-development
  - uaa-smoke-tests-development
  - smoke-tests-development
- name: staging
  jobs:
  - deploy-cf-staging
  - terraform-plan-staging
  - terraform-apply-staging
  - deploy-diego-staging
  - uaa-smoke-tests-staging
  - smoke-tests-staging
  - acceptance-tests-staging
- name: production
  jobs:
  - deploy-cf-production
  - terraform-plan-production
  - terraform-apply-production
  - deploy-diego-production
  - smoke-tests-production
  - uaa-smoke-tests-production
